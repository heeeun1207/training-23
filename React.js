// splice, 즉 '접착' 한다는 뜻의 splice() 메서드는 리액트에 관심이 많은 훈련생 분들에게 매우 특별한 메서드입니다. 리액트는 익히 아시듯, 클라이언트에서 랜더링하게끔 조정되어있고, 이 과정에서 사용자로하여금 최적의 속도, 즉 사용자 경험을 이끌어내는 것이 목적입니다. 다양한 엘리먼트 변화에 대응하기 위해 특별한 '중간 기착점' 으로의 역할을 하는 함수(클래스)가 존재합니다.

// 리액트 작성코드를 독해하는 것은 매우 가독성이 떨어지므로, 핵심이 될 개념을 소개하기 위해 설명과 함께 금일 실습하였던 typescript 작성도 함께 작성해보면서 어떤 특징들이 있는지 살펴보시기 바랍니다. 

// 알고리즘으로는 리액트가 선택한 '단방향 데이터 바인딩', '가상 DOM', 그리고 "클라이언트 사이드" 에 해당하고, 
// 개발 안정성 측면으로는 타입스크립트의 그 효용성과 퍼포먼스를 점치는데 그 목적이 있습니다. 다소 낯설은 표기가 곧 매우 편리한 도구로 자리매김 할 것을 기대하며 자세히 확인해보시고, 더불어 실습해보시기 바랍니다.
const pokemonList = ["피카츄","라이츄","파이리","꼬부기"];

//자바스크립트가 지원하는 강력한 배열 메서드에는 
//"어디서부터 어디까지" 교체한다는 의미의 splic 메서드가 있다.
//예를 들어 위의 배열 0번 부터 1번까지 전기포켓몬을 교체하고 싶다면
//아래와 같이 splice 메서드를 사용할 수 있습니다.
pokemonList.splice(0,2, "야도란", "또가스");
//splice(포함, 미만, 교체할 값1 , 교체할 값2) 방식으로 기존에 소개했던 메서드와 비슷한 듯 다르다.
//현 위치 9번 라인에서 배열 pokemonList 를 디버깅하면 ,
//["야도란","또가스","파이리","꼬부기"] 라는 결과를 얻을 수 있다.
//이것을 .join("")  메서드를 사용하여 문자열로 변환하면
//"야도란또가스파이리꼬부기" 라는 결과를 얻을 수 있다.

//문자열이 '필요한 만큼' 교체되고 , 합쳐진다면 , 자유롭게 변형할 수 있는 강력한 로직을 만들어 낼 수 있다.
//이러한 비교로 reat 에서는 state를 사용하여 
//필요한 만큼의 데이터를 교체하고, 합쳐서 화면에 보여주는 로직을 만들어 낼 수 있다. 

function exampleOne(array, change1, change2){
  const result = array.splice(0,2, change1, change2 )
  return result.join("");
}
const result = exampleOne(pokemonList, "야도란", "또가스");
console.log(result); 

//제한적이지만 위와 같은 방식으로 데이터를 '교체'하는 함수를 만들어낼 수 있다.
//문자열 메서드인 .replace() 메서드를 사용하는 것과 비슷하지만 구분된다.

//위의 exampleOne() 함수를 타입스크립트의 타입명시 (type annotation)를 사용하여 안정성을 확보해라 
//배열의 경우 타입 명시를 위해 Array<string>를 사용하거나, string[]를 사용할 수 있다. 
